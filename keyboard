using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Windows.Forms;


namespace keyboard
{
    public partial class Form1 : Form
    {
        public Form1()
        {
            InitializeComponent();
        }
        public struct Timers { public double w1, w2; } // структура для времён
        Timers ftime = new Timers();
        public static System.Diagnostics.Stopwatch watch = new System.Diagnostics.Stopwatch();
        Dictionary<string, Timers> ColDic = new Dictionary<string, Timers>();  // коллекция
        Queue<int> qd1 = new Queue<int>(); // очередь d1
        public static string work, t_bet = "", t_pre = "", t_bet1 = "", t_pre1 = ""; // переменная для создания ключа + порядкового номера
        int i = 0, k = 0; // порядковый номер
        double d1, d2; // время dow, время up
        public double workUp = -300; // Время предыдущего нажатия клавиши
        private void textBox1_KeyDown(object sender, KeyEventArgs e)// нажатие клавиши
        {
            d1 = watch.ElapsedMilliseconds;
            qd1.Enqueue((int)d1);
        }
        private void textBox1_KeyUp(object sender, KeyEventArgs e)//отпускание клавиши
        {
            i++; // увеличение итератора для уникальности ключа
            d2 = watch.ElapsedMilliseconds;
            work = "" + e.KeyData + " " + i; // создание уникального ключа
            ftime.w1 = (d2 - qd1.Dequeue()); // время (Up-Down)
            if (workUp == -300) { ftime.w2 = 0; } // если первый раз, то время между = 0;
            else { ftime.w2 = d1 - workUp; }
            t_pre1 += ftime.w1 + "\t";
            t_bet1 += ftime.w2 + "\t";
            ColDic.Add(work, ftime);
            workUp = d2; // обновление workUp
            //label3.Text = t_pre1;
        }
        private void Form1_Shown_1(object sender, EventArgs e)//открытие формы
        {
            watch.Start();
        }
        private void Form1_FormClosing_1(object sender, FormClosingEventArgs e)//закрытие формы
        {
            watch.Stop();
        }
        //private void button1_Click_1(object sender, EventArgs e) //печать результатов
        //{
        //    foreach (KeyValuePair<string, Timers> f in ColDic)
        //    {
        //        ListViewItem str = new ListViewItem(f.Key);
        //        str.SubItems.Add("" + f.Value.w1);
        //        str.SubItems.Add("" + f.Value.w2);
        //        listView1.Items.Add(str);
        //    }
        //}
        private void button2_Click_1(object sender, EventArgs e) //сброс
        {
            ColDic.Clear();
            d1 = d2 = 0;
            i = 0;
            work = "";
            workUp = -300;
            t_pre1 = t_bet1 = "";
            textBox1.Clear();
            //listView1.Items.Clear();
            ColDic = new Dictionary<string, Timers>();
            textBox1.Focus();
        }
        private void button3_Click_1(object sender, EventArgs e)// кнопка сохранить
        {
            t_bet += t_bet1 + Environment.NewLine;
            File.WriteAllText("time_between.txt", t_bet);
            t_pre += t_pre1 += Environment.NewLine;
            File.WriteAllText("time_press.txt", t_pre);
            k += 1;
            label2.Text = "Количество полученных образцов: " + k;
            button2_Click_1(sender, e);
        }
        private void button4_Click_1(object sender, EventArgs e)//кнопка "результаты"
        {
            Read();
        }
        private void Read()//Чтение массивов из файлов и обработка
        {
            string[] strArr1 = File.ReadAllLines("time_between.txt", Encoding.Default);
            string[] strArr2 = File.ReadAllLines("time_press.txt", Encoding.Default);
            int z = 0;
            foreach (string s in strArr2)
            {
                strArr2[z] = Regex.Replace(strArr2[z], " +", " ").Trim();
                z++;
            }
            z = 0;
            foreach (string s in strArr1)
            {
                strArr1[z] = Regex.Replace(strArr1[z], " +", " ").Trim();
                z++;
            }
            int m, k; m = strArr1.Length; k = strArr2.Length;
            int n, l; l = Regex.Split(strArr2[0], "\t").Count();
            n = Regex.Split(strArr1[0], "\t").Count();
            int[,] res_bet = new int[m, n];
            int[,] res_pres = new int[k, l];
            int j = 0;
            for (int i = 0; i < m; i++)
            {
                foreach (string s in Regex.Split(strArr1[i], "\t"))
                {
                    res_bet[i, j] = Convert.ToInt32(s);
                    j++;
                }
                j = 0;
            }
            for (int i = 0; i < k; i++)
            {
                foreach (string s in Regex.Split(strArr2[i], "\t"))
                {
                    res_pres[i, j] = Convert.ToInt32(s);
                    j++;
                }
                j = 0;
            }
            double[] arrM = M(0.0, res_bet);
            double[] arrD = D(res_bet, arrM, 0.0);
            double[,] arrKor = Correl(arrM, res_bet, 0);
            double[,] arrCov = Covariation(arrM, res_bet, 0);
            double[,] arrDov = Dover(arrM, arrD, res_bet.GetLength(0));
            Print(res_bet, arrM, arrD, arrKor, arrCov, arrDov, "time_betweenResults.txt");
            arrM = M(0.0, res_pres);
            arrD = D(res_pres, arrM, 0.0);
            arrKor = Correl(arrM, res_pres, 1);
            arrCov = Covariation(arrM, res_pres, 1);
            arrDov = Dover(arrM, arrD, res_pres.GetLength(0));
            Print(res_pres, arrM, arrD, arrKor, arrCov, arrDov, "time_pressResults.txt");

        }
        public static void Print(int[,] arr, double[] arm, double[] ard, double[,]
        arrKor, double[,] arrCov, double[,] arrDov, string file)//запись в файл подсчётов
        {
            string str = "Матрица", work = "";
            for (int h = 0; h < arr.GetLength(0); h++)
            {
                str += Environment.NewLine + "\t";
                for (int j = 0; j < arr.GetLength(1); j++)
                {
                    str += arr[h, j] + "\t";
                }
            }
            str += Environment.NewLine + Environment.NewLine + "Mx" + "\t";
            for (int i = 0; i < arm.Length; i++)
            { str = str + Math.Round(arm[i], 2) + "\t"; }
            str += Environment.NewLine + Environment.NewLine + "Dx" + "\t";
            for (int i = 0; i < ard.Length; i++)
            { str = str + Math.Round(ard[i], 2) + "\t"; }
            str += Environment.NewLine + Environment.NewLine + "sigma" + "\t";
            for (int i = 0; i < ard.Length; i++)
            { str = str + Math.Round(Math.Sqrt(ard[i]), 2) + "\t"; }
            str += Environment.NewLine + Environment.NewLine + "Корреляция:" + Environment.NewLine;
            for (int i = 0; i < arr.GetLength(1); i++)
            {
                str += Environment.NewLine + "\t";
                for (int j = 0; j < arr.GetLength(1); j++)
                {
                    str += Math.Round(arrKor[i, j], 3) + "\t";
                }
            }
            str += Environment.NewLine + Environment.NewLine + "Ковариация:" + Environment.NewLine;
            for (int i = 0; i < arr.GetLength(1); i++)
            {
                str += Environment.NewLine + "\t";
                for (int j = 0; j < arr.GetLength(1); j++)
                {
                    str += Math.Round(arrCov[i, j], 1) + "\t";
                }
            }
            str += Environment.NewLine + Environment.NewLine + "Доверительные интервалы: " + Environment.NewLine;
            for (int i = 0; i < 2; i++)
            {
                str += Environment.NewLine + "\t";
                for (int j = 0; j < arm.GetLength(0); j++)
                {
                    str += Math.Round(arrDov[i, j], 2) + "\t";
                }
            }
            File.WriteAllText(file, str);
        }
        public static double[] M(double work, int[,] arr)// расчёт мат. ожиданий
        {
            double[] arrM = new double[arr.GetLength(1)];
            for (int h = 0; h < arr.GetLength(1); h++)
            {
                for (int j = 0; j < arr.GetLength(0); j++)
                {
                    work = work + arr[j, h]; // Средние
                }
                arrM[h] = work / arr.GetLength(0);
                work = 0;
            }
            return arrM;
        }

        public static double[] D(int[,] arr, double[] arrM, double work)// расчёт дисперсий
        {
            double[] arrD = new double[arr.GetLength(1)];
            for (int h = 0; h < arr.GetLength(1); h++)
            {
                for (int j = 0; j < arr.GetLength(0); j++)
                {
                    work = work + Math.Pow(arr[j, h] - arrM[h], 2);
                }
                arrD[h] = work / (arr.GetLength(0) - 1);
                work = 0;
            }
            return arrD;
        }
        public static double[,] Correl(double[] arrM, int[,] arr, int n)//составление матрицы коррляций
        {
            double[,] arrKor = new double[arr.GetLength(1), arr.GetLength(1)];
            for (int j = 0; j < arr.GetLength(1); j++)
            {
                for (int h = 0; h < arr.GetLength(1); h++)
                {
                    //if (h == j + 1) arrKor[j, h - 1] = 1;
                    arrKor[j, h] = UpCor(j, h, arrM, arr) / DownCor(j, h, arrM,
                   arr);
                }
            }
            return arrKor;
        }
        public static double UpCor(int j, int h, double[] arrM, int[,] arr)// расчёт числителя в корелляции
        {
            double res = 0;
            for (int i = 0; i < arr.GetLength(0); i++)
            {
                res = res + (arr[i, j] - arrM[j]) * (arr[i, h] - arrM[h]);
            }
            return res;
        }
        public static double DownCor(int j, int h, double[] arrM, int[,] arr)//расчёт знаменателя в корелляции

        {
            double res = 0, res1 = 0, res2 = 0;
            for (int i = 0; i < arr.GetLength(0); i++)
            {
                res1 = res1 + Math.Pow((arr[i, j] - arrM[j]), 2);
                res2 = res2 + Math.Pow((arr[i, h] - arrM[h]), 2);
            }
            res = Math.Sqrt(res1) * Math.Sqrt(res2);
            return res;
        }
        public static double[,] Covariation(double[] arrM, int[,] arr, int n) //составление матрицы ковариаций
        {
            double[,] arrCov = new double[arr.GetLength(1), arr.GetLength(1)];
            for (int j = 0; j < arr.GetLength(1); j++)
            {
                for (int h = 0; h < arr.GetLength(1); h++)
                {
                    arrCov[j, h] = UpCor(j, h, arrM, arr) / (arr.GetLength(0));
                }
            }
            return arrCov;
        }
        public static double[,] Dover(double[] arrM, double[] arrD, int n) //расчёт доверительных интервалов
        {
            double[,] arrDov = new double[2, arrM.GetLength(0)];
            for (int i = 0; i < 2; i++)
            {
                for (int j = 0; j < arrM.GetLength(0); j++)
                {
                    if (i == 0) arrDov[i, j] = arrM[j] -
                   1.9719 * Math.Sqrt(arrD[j]) / Math.Sqrt(n);
                    else arrDov[i, j] = arrM[j] + 1.9719 * Math.Sqrt(arrD[j]) / Math.Sqrt(n);
                }
            }
            return arrDov;
        }
        private void textBox2_KeyDown(object sender, KeyEventArgs e)
        {

        }

        private void textBox2_KeyUp(object sender, KeyEventArgs e)
        {

        }

        //private void button5_Click_1(object sender, EventArgs e)//кнопка "Проверить"
        //{
        //Predict();
        //}
        private void button1_Click(object sender, EventArgs e)
        {
            textBox2.Clear();
            label3.Text = "";
        }

        private void Predict()
        {
            double[,] res_bet = Mass("time_between.txt"); // Чтение данных из файлов
            double[,] res_pres = Mass("time_press.txt");
            double[,] V = Vector(res_bet, res_pres);     // составление вектора Эталона
            double[] arrM = Mint(V); // составление матожиданий по вектору
            //double[] arrD = D(V, arrM, 0.0); // составление дисперсий по вектору
            double[,] arrCov = new double[V.GetLength(1), V.GetLength(1)];
            alglib.covm(V, out arrCov);
            int info, n1 = 0, a1 = 0;
            alglib.matinvreport rep;
            alglib.rmatrixinverse(ref arrCov, out info, out rep); // Подсчёт обратной матрицы с помощью библиотеки
            double[,] res_bet_test = Mass("time_betweenResults.txt"); // Чтение   тестовых данных из файлов
            double[,] res_pres_test = Mass("time_pressResults.txt");
            for (int i = 0; i < res_bet_test.GetLength(0); i++) //запуск тестовых значений
            {
                double[,] bet_test = new double[1, res_bet_test.GetLength(1)];
                double[,] pres_test = new double[1, res_pres_test.GetLength(1)];
                for (int j = 0; j < res_bet_test.GetLength(1); j++)
                {
                    bet_test[0, j] = res_bet_test[i, j];
                }
                for (int j = 0; j < res_pres_test.GetLength(1); j++)
                {
                    pres_test[0, j] = res_pres_test[i, j];
                }
                double[,] V_test = Vector(bet_test, pres_test); //составление вектора тестировочного ввода
                double r = G(arrCov, arrM, V_test); // запуск функции разделения гиперпллоскости
                if (r < 0)
                {
                    a1++; label2.Text = "Пользователь авторизован ";
                } // печать результатов
                else
                {
                    n1++; label2.Text = "Пользователь неаторизован";
                }
            }
            //label3.Text = "Authors = " + a1 + " Nonauthors " + n1;
        }

        public static double[,] Vector(double[,] between, double[,] press)
        {
            int z = 0;
            double[] arrMint = Mint(between); //
            double[] arrAlf = Aritm(between, arrMint); //
            double[] si = Speed(between, press); //
            double[,] diff = Difference(between);
            double[,] V = new double[between.GetLength(0), between.GetLength(1) + 5]; //+5
            for (int t = 0; t < V.GetLength(0); t++) //
            {
                for (z = 0; z < V.GetLength(1) - 5; z++) //-5
                {
                    V[t, z] = between[t, z];
                }
                V[t, z] = arrMint[t];
                V[t, z + 1] = arrAlf[t];
                V[t, z + 2] = si[t];
                V[t, z + 3] = diff[t, 1];
                V[t, z + 4] = diff[t, 2];
            }
            return V;
        }
        public static double G(double[,] arrCov, double[] arrM, double[,] U) //
        {
            double work = 0.0;
            for (int j = 0; j < arrCov.GetLength(0); j++) //
            {
                for (int k = 0; k < arrCov.GetLength(0); k++)
                {
                    work = work + arrCov[j, k] * ((U[0, j] - arrM[j]) * (U[0, k] - arrM[k]));
                }
            }
            return (0.5 * work - 3.3735 * 3.3735); //
        }

        public static double[,] Mass(string file) //Парсинг текста в массив
        {
            string[] strArr = File.ReadAllLines(file, Encoding.Default);
            int z = 0;
            foreach (string s in strArr)
            {
                strArr[z] = Regex.Replace(strArr[z], " +", " ").Trim();
                z++;
            }
            int m = strArr.Length;
            int n = Regex.Split(strArr[0], "\t").Count();
            double[,] arr = new double[m, n];
            int j = 0;
            for (int i = 0; i < m; i++)
            {
                foreach (string s in Regex.Split(strArr[i], "\t"))
                {
                    arr[i, j] = Convert.ToDouble(s);
                    j++;
                }
                j = 0;
            }
            return arr;
        } //Создание массива

        public static double[] Mint(double[,] arr) //расчёт мат. ожиданий
        {
            double work = 0;
            double[] arrM = new double[arr.GetLength(0)];
            for (int h = 0; h < arr.GetLength(0); h++)
            {
                for (int j = 0; j < arr.GetLength(1); j++)
                {
                    work = work + arr[h, j] / Max(arr, h); // Средние mint= ∑X[i,k]/max⁡(X[i,k]〗
                }
                arrM[h] = work / arr.GetLength(1); // mint= 1 / n(∑)
                work = 0;
            }
            return arrM;
        }
        public static double Max(double[,] arr, int h) // максимальный элемент в строке
        {
            double work = arr[h, 0];
            for (int i = 1; i < arr.GetLength(1); i++)
            {
                if (arr[h, i] > work) work = arr[h, i];
            }
            return work;
        }

        public static double[] Aritm(double[,] arr, double[] arrM) //аритмичность набора
        {
            double work = 0;
            double[] alf = new double[arr.GetLength(0)];
            for (int h = 0; h < arr.GetLength(0); h++)
            {
                for (int j = 0; j < arr.GetLength(1); j++)
                {
                    work = work + Math.Pow(arr[h, j] / Max(arr, h) - arrM[h], 2);  // ∑(X[i,k]/max()-mint[i])^2
                }
                alf[h] = Math.Sqrt(work / (arr.GetLength(1) - 1)); //√(1/(n-1)
                work = 0;
            }
            return alf;
        }
        public static double[] Speed(double[,] arrB, double[,] arrP) //Скорость ввода
        {
            double work = 0;
            double[] arrS = new double[arrB.GetLength(0)];
            for (int h = 0; h < arrB.GetLength(0); h++)
            {
                for (int j = 0; j < (arrP.GetLength(1)); j++)
                {
                    work = work + arrP[h, j]; // ∑X[i,k]
                }
                for (int j = 0; j < (arrB.GetLength(1)); j++)
                {
                    work = work + arrB[h, j]; // +∑Y[k,i]
                }
                arrS[h] = work * 0.015; // (900/60)*1/1000 (из миллисек в сек)
                work = 0;
            }
            return arrS;
        }
        public static double[,] Difference(double[,] between)
        {
            double[,] arrD = new double[between.GetLength(0), 3];
            double[] arr = new double[between.GetLength(1) - 1];
            double work = 0.0, plus = 0.0, exch = 0.0;
            for (int i = 0; i < between.GetLength(0); i++)
            {
                for (int j = 0; j < arr.GetLength(0); j++)
                {
                    arr[j] = between[i, j + 1] - between[i, j];
                }
                if (arr[0] >= 0) plus += 1;
                for (int j = 1; j < arr.GetLength(0); j++)
                {
                    if (arr[j] * arr[j - 1] <= 0) exch += 1;
                    if (arr[j] >= 0) plus += 1;
                }
                arrD[i, 1] = plus / (arr.GetLength(0));
                arrD[i, 2] = exch / (arr.GetLength(0) - 1);
                work = plus = exch = 0;
            }
            return arrD;
        }
        public static double ns(double[,] res_bet, int h) // Число перекрытий
        {
            double ns = 0;
            for (int i = 0; i < res_bet.GetLength(1); i++)
            {
                if (res_bet[h, i] < 0) ns += 1;
            }
            return ns;
        }

    }
}
